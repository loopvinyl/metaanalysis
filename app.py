import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import os
from meta_analysis import (
    load_and_prepare_data,
    filter_irrelevant_treatments,
    define_groups_and_residues,
    prepare_for_meta_analysis,
    run_meta_analysis, # Importa a fun√ß√£o atualizada para MixedLM/REML
    generate_forest_plot,
    generate_funnel_plot
)

# --- Configura√ß√£o do Aplicativo ---
st.set_page_config(layout="wide", page_title="Vermicompost Meta-Analysis")

# --- T√≠tulo ---
st.title("üå± Vermicompost Meta-Analysis: Effect of Different Residues")

st.markdown("""
Esta aplica√ß√£o realiza uma meta-an√°lise para avaliar o efeito de diferentes res√≠duos na qualidade do vermicomposto.
Ela carrega automaticamente os dados do arquivo 'csv.csv' para a an√°lise.
""")

# --- Carregamento e Processamento de Dados ---
st.header("1. Carregamento e Prepara√ß√£o de Dados")

# Define o caminho para o seu arquivo CSV.
# Assume que 'csv.csv' est√° no mesmo diret√≥rio que 'app.py'.
file_path = "csv.csv" 
# Se o 'csv.csv' estiver em uma subpasta 'data', use:
# file_path = os.path.join("data", "csv.csv")

dados_meta_analysis = pd.DataFrame() # Inicializa um DataFrame vazio

if os.path.exists(file_path):
    st.info(f"Carregando dados de '{file_path}'...")
    # --- Pipeline de Processamento de Dados ---
    dados = load_and_prepare_data(file_path)
    if not dados.empty:
        dados_filtrados = filter_irrelevant_treatments(dados)
        dados_grupos = define_groups_and_residues(dados_filtrados)
        dados_meta_analysis = prepare_for_meta_analysis(dados_grupos)
        
        if dados_meta_analysis.empty:
            st.warning("Dados insuficientes para realizar a meta-an√°lise ap√≥s filtragem e prepara√ß√£o. Por favor, verifique os dados em 'csv.csv'.")
        else:
            st.success(f"Dados preparados para meta-an√°lise. {len(dados_meta_analysis)} registros dispon√≠veis.")
            st.subheader("Amostra dos Dados Preparados:")
            st.dataframe(dados_meta_analysis.head())
    else:
        st.error(f"N√£o foi poss√≠vel carregar ou processar dados de '{file_path}'. Por favor, verifique o formato do arquivo e certifique-se de que usa ';' como delimitador e '.' como separador decimal.")
else:
    st.error(f"O arquivo '{file_path}' n√£o foi encontrado. Por favor, certifique-se de que 'csv.csv' est√° no diret√≥rio correto.")

st.markdown("---")

# --- Se√ß√£o de Meta-An√°lise ---
st.header("2. Executar Modelos de Meta-An√°lise e Gerar Gr√°ficos")

# Mostra os bot√µes de an√°lise apenas se os dados estiverem prontos e houver pelo menos 2 registros
if not dados_meta_analysis.empty and len(dados_meta_analysis) >= 2: 
    st.markdown("Selecione um modelo para executar e visualizar seus resultados. Todas as sa√≠das e gr√°ficos est√£o em ingl√™s.")

    col1, col2, col3 = st.columns(3)

    with col1:
        if st.button("üìà Analyze by Residue Type"):
            st.subheader("Analysis by Residue Type")
            with st.spinner("Calculating..."):
                results = run_meta_analysis(dados_meta_analysis, model_type="Residue")
                if results:
                    st.markdown("#### Mixed-Effects Model (k = {k}; tau¬≤ estimator: REML)".format(k=len(dados_meta_analysis)))
                    st.write(f"**tau¬≤ (estimated residual heterogeneity):** {results['tau2']:.4f}")
                    st.write(f"**I¬≤ (residual heterogeneity / unaccounted variability):** {results['I2']:.2f}%")
                    # No QE e p-value direto do MixedLM para heterogeneidade residual, conforme discutido
                    # st.write(f"**Test for Residual Heterogeneity (QE):** {results['QE']:.4f}, p-val = {results['QE_pval']:.4f}") # Comentei essa linha
                    st.write("---")
                    st.markdown("#### Model Results:")

                    coef_df = pd.DataFrame({
                        'estimate': results['beta'],
                        'se': results['se'],
                        'zval': results['zval'],
                        'pval': results['pval'],
                        'ci.lb': results['ci.lb'],
                        'ci.ub': results['ci.ub']
                    })
                    # Ajustar nomes dos termos para exibi√ß√£o
                    coef_df.index = coef_df.index.str.replace('C(Residue)[T.', '', regex=False).str.replace(']', '', regex=False)
                    st.dataframe(coef_df)
                    
                    # Gerar e mostrar gr√°ficos
                    fig_forest = generate_forest_plot(dados_meta_analysis, results, title="Forest Plot - Residue Type Model")
                    if fig_forest:
                        st.pyplot(fig_forest)
                        plt.close(fig_forest) # Fecha a figura para liberar mem√≥ria
                    else:
                        st.warning("N√£o foi poss√≠vel gerar o Forest Plot para o modelo de Tipo de Res√≠duo. Verifique a sufici√™ncia dos dados.")

                else:
                    st.warning("N√£o foi poss√≠vel executar a an√°lise para Tipo de Res√≠duo. Dados insuficientes ou problema no ajuste do modelo.")

    with col2:
        if st.button("üìä Analyze by Variable"):
            st.subheader("Analysis by Variable")
            with st.spinner("Calculating..."):
                results = run_meta_analysis(dados_meta_analysis, model_type="Variable")
                if results:
                    st.markdown("#### Mixed-Effects Model (k = {k}; tau¬≤ estimator: REML)".format(k=len(dados_meta_analysis)))
                    st.write(f"**tau¬≤ (estimated residual heterogeneity):** {results['tau2']:.4f}")
                    st.write(f"**I¬≤ (residual heterogeneity / unaccounted variability):** {results['I2']:.2f}%")
                    st.write("---")
                    st.markdown("#### Model Results:")

                    coef_df = pd.DataFrame({
                        'estimate': results['beta'],
                        'se': results['se'],
                        'zval': results['zval'],
                        'pval': results['pval'],
                        'ci.lb': results['ci.lb'],
                        'ci.ub': results['ci.ub']
                    })
                    # Ajustar nomes dos termos para exibi√ß√£o
                    coef_df.index = coef_df.index.str.replace('C(Variable)[T.', '', regex=False).str.replace(']', '', regex=False)
                    st.dataframe(coef_df)
                    
                    fig_forest = generate_forest_plot(dados_meta_analysis, results, title="Forest Plot - Variable Model")
                    if fig_forest:
                        st.pyplot(fig_forest)
                        plt.close(fig_forest)
                    else:
                        st.warning("N√£o foi poss√≠vel gerar o Forest Plot para o modelo de Vari√°vel. Verifique a sufici√™ncia dos dados.")
                else:
                    st.warning("N√£o foi poss√≠vel executar a an√°lise para Vari√°vel. Dados insuficientes ou problema no ajuste do modelo.")

    with col3:
        if st.button("üîó Analyze Interaction (Residue √ó Variable)"):
            st.subheader("Analysis by Interaction (Residue √ó Variable)")
            with st.spinner("Calculating..."):
                results = run_meta_analysis(dados_meta_analysis, model_type="Interaction")
                if results:
                    st.markdown("#### Mixed-Effects Model (k = {k}; tau¬≤ estimator: REML)".format(k=len(dados_meta_analysis)))
                    st.write(f"**tau¬≤ (estimated residual heterogeneity):** {results['tau2']:.4f}")
                    st.write(f"**I¬≤ (residual heterogeneity / unaccounted variability):** {results['I2']:.2f}%")
                    st.write("---")
                    st.markdown("#### Model Results:")

                    coef_df = pd.DataFrame({
                        'estimate': results['beta'],
                        'se': results['se'],
                        'zval': results['zval'],
                        'pval': results['pval'],
                        'ci.lb': results['ci.lb'],
                        'ci.ub': results['ci.ub']
                    })
                    # Ajustar nomes dos termos para intera√ß√£o
                    coef_df.index = coef_df.index.str.replace('C(Residue)[T.', '', regex=False) \
                                               .str.replace(']:C(Variable)[T.', ':', regex=False) \
                                               .str.replace(']', '', regex=False)
                    st.dataframe(coef_df)

                    fig_forest = generate_forest_plot(dados_meta_analysis, results, title="Forest Plot - Interaction Model")
                    if fig_forest:
                        st.pyplot(fig_forest)
                        plt.close(fig_forest)
                    else:
                        st.warning("N√£o foi poss√≠vel gerar o Forest Plot para o modelo de Intera√ß√£o. Verifique a sufici√™ncia dos dados.")
                else:
                    st.warning("N√£o foi poss√≠vel executar a an√°lise para Intera√ß√£o. Dados insuficientes ou problema no ajuste do modelo.")

    st.markdown("---")
 
    st.header("3. Gr√°ficos Adicionais")

    col_forest, col_funnel = st.columns(2)
    with col_forest:
        if st.button("üå≥ Gerar Forest Plot Geral"): # Texto do bot√£o alterado
            st.subheader("Forest Plot de Estudos Individuais")
            with st.spinner("Gerando Forest Plot..."):
                # Para o Forest Plot geral, passamos um dicion√°rio vazio para model_results
                # porque este plot mostra os estudos individuais, n√£o um modelo espec√≠fico.
                fig_forest = generate_forest_plot(dados_meta_analysis, {}, title="Forest Plot Geral (Estudos Individuais)")
                if fig_forest:
                    st.pyplot(fig_forest)
                    plt.close(fig_forest)
                else:
                    st.warning("N√£o foi poss√≠vel gerar o Forest Plot Geral. Verifique a sufici√™ncia dos dados.")
    
    with col_funnel:
        if st.button("üß™ Gerar Funnel Plot"):
            st.subheader("Funnel Plot para Vi√©s de Publica√ß√£o")
            with st.spinner("Gerando Funnel Plot..."):
                fig_funnel = generate_funnel_plot(dados_meta_analysis)
                if fig_funnel:
                    st.pyplot(fig_funnel)
                    plt.close(fig_funnel)
                else:
                    st.warning("N√£o foi poss√≠vel gerar o Funnel Plot. Verifique a sufici√™ncia dos dados.")

else:
    st.info("Por favor, certifique-se de que 'csv.csv' est√° no diret√≥rio correto e foi processado com sucesso (com pelo menos 2 registros) para prosseguir com a an√°lise.")

st.markdown("---")
st.markdown("üî¨ Desenvolvido usando Streamlit e Python para meta-an√°lise da qualidade do vermicomposto.")
